Q. What is an API?
 - Full Form: Application Programming Interface
 - Purpose: To let different software systems talk to each other

Example:

- When you sign in with Google on a website â†’ That site uses Googleâ€™s API to verify your identity.

- A weather app fetching weather data from a server â†’ It uses a Weather API.


ðŸ”¹ Types of API Protocols (by design)

1. REST API (most common)

Based on HTTP
Easy, scalable, uses JSON or XML
Example: https://api.weatherapi.com/v1/current.json?key=YOUR_KEY&q=London

2. SOAP API (older but secure)

Based on XML
Used in enterprise systems
More strict, complex structure

3. GraphQL API

Client can request exactly what data is needed
More flexible than REST

4. WebSocket API

For real-time, two-way communication (e.g., live chat, games)


// HTTP Methods in REST API (CRUD Operations)

| Method   | Purpose   | CRUD Operation     | Example (Using `/users`)                 |
| -------- | --------- | ------------------ | ---------------------------------------- |
| `GET`    | Get data  | **Read**           | `GET /users` â†’ Fetch all users           |
| `POST`   | Send data | **Create**         | `POST /users` â†’ Create a new user        |
| `PUT`    | Update    | **Update**         | `PUT /users/1` â†’ Update entire user 1    |
| `PATCH`  | Modify    | **Partial Update** | `PATCH /users/1` â†’ Update part of user 1 |
| `DELETE` | Remove    | **Delete**         | `DELETE /users/1` â†’ Delete user 1        |


// Common Terms in APIs

| Term               | Meaning                                                                  |
| ------------------ | ------------------------------------------------------------------------ |
| **Endpoint**       | A specific URL path in the API (e.g., `/users`, `/products`)             |
| **Request**        | The action sent from client to server (includes method + headers + data) |
| **Response**       | The serverâ€™s reply (status code + data)                                  |
| **Status Code**    | HTTP code like 200 (OK), 404 (Not Found), 500 (Server Error)             |
| **Headers**        | Metadata (e.g., Content-Type, Authorization token)                       |
| **Payload / Body** | The actual data sent in POST/PUT/PATCH requests                          |


//  Status Code Cheatsheet

| Code | Meaning      |
| ---- | ------------ |
| 200  | OK (Success) |
| 201  | Created      |
| 400  | Bad Request  |
| 401  | Unauthorized |
| 403  | Forbidden    |
| 404  | Not Found    |
| 500  | Server Error |



// Example Free APIs for Practice

1. JSONPlaceholder â€“ https://jsonplaceholder.typicode.com

2. OpenWeatherMap â€“ https://openweathermap.org/api

3. REST Countries â€“ https://restcountries.com

4. FakeStoreAPI â€“ https://fakestoreapi.com

5. FreeAPI.app â€“ https://freeapi.app (Indian based)



// Example how to call the api

 1. Using fetch() to Call an API
ðŸ”¹ GET Request with fetch (Async/Await Style)

// Get Method 

async function getUsers() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/users');
    const data = await response.json();
    console.log(data); // list of users
  } catch (error) {
    console.error('Error fetching users:', error);
  }
}
getUsers();


// Post Method

async function createUser() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/users', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name: 'Vikash Sharma',
        email: 'vikash@example.com'
      })
    });

    const data = await response.json();
    console.log('User created:', data);
  } catch (error) {
    console.error('Error creating user:', error);
  }
}
createUser();



2.  . Using axios to Call an API
First, install axios (in Node.js/React):

- npm install axios

// Using Get Method

import axios from 'axios';

async function getUsers() {
  try {
    const response = await axios.get('https://jsonplaceholder.typicode.com/users');
    console.log(response.data); // user list
  } catch (error) {
    console.error('Axios GET error:', error);
  }
}
getUsers();


// Using Post Method

import axios from 'axios';

async function createUser() {
  try {
    const response = await axios.post('https://jsonplaceholder.typicode.com/users', {
      name: 'Vikash Sharma',
      email: 'vikash@example.com'
    });

    console.log('User created:', response.data);
  } catch (error) {
    console.error('Axios POST error:', error);
  }
}
createUser();


// Where to Use async and await

| Keyword | Purpose                                                                                           |
| ------- | ------------------------------------------------------------------------------------------------- |
| `async` | Marks a function as asynchronous. It returns a Promise.                                           |
| `await` | Pauses execution until the promise is resolved or rejected. Only usable inside `async` functions. |



âœ… Rule:
Use await when calling a function that returns a promise (e.g., fetch(), axios.get()).

Always wrap await calls in a function declared with async.


// One write method that we use every Method of API

const API_URL = 'https://jsonplaceholder.typicode.com/users';

// ðŸ“Œ GET â€“ Read Data
export const getUsers = async () => {
  try {
    const response = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': 'Bearer token123'
      }
    });
    return await response.json();
  } catch (error) {
    console.error('GET Error:', error);
  }
};

// ðŸ“Œ POST â€“ Create Data
export const createUser = async (user) => {
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token123'
      },
      body: JSON.stringify(user)
    });
    return await response.json();
  } catch (error) {
    console.error('POST Error:', error);
  }
};

// ðŸ“Œ PUT â€“ Full Update
export const updateUser = async (id, user) => {
  try {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token123'
      },
      body: JSON.stringify(user)
    });
    return await response.json();
  } catch (error) {
    console.error('PUT Error:', error);
  }
};

// ðŸ“Œ PATCH â€“ Partial Update
export const patchUser = async (id, userData) => {
  try {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token123'
      },
      body: JSON.stringify(userData)
    });
    return await response.json();
  } catch (error) {
    console.error('PATCH Error:', error);
  }
};

// ðŸ“Œ DELETE â€“ Remove Data
export const deleteUser = async (id) => {
  try {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'DELETE',
      headers: {
        'Authorization': 'Bearer token123'
      }
    });
    return response.ok; // returns true/false
  } catch (error) {
    console.error('DELETE Error:', error);
  }
};

